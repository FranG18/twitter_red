{"version":3,"sources":["../../../src/app/services/apiServices.js"],"names":["apiGraphUrl","apiUrl","queries","getUsers","getUsersEmails","axios","post","query","data","console","log","isAuthenticated","get","authenticated","login","email","password","method","url","headers","querystring","stringify","response","logout","getUserData","postTweet","tweetText","text"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport regeneratorRuntime, { async } from \"regenerator-runtime\";\r\nimport querystring from 'querystring'\r\n\r\nconst apiGraphUrl = 'http://localhost:3000/graphql';\r\nconst apiUrl = 'http://localhost:3000/api/'\r\nconst queries = {\r\n    getUsers: `query{\r\n        users{\r\n          _id\r\n          userName\r\n          profile\r\n          email\r\n        }\r\n      }`,\r\n    getUsersEmails: `{\r\n        users{\r\n        _id\r\n        email\r\n        }\r\n    }`\r\n};\r\n\r\nexport const getUsers = async () => {\r\n    try {\r\n        const { data } = await axios.post(apiGraphUrl, {\r\n            query: queries.getUsers\r\n        });\r\n        return data;\r\n    } catch (err) {\r\n        console.log(err)\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport const isAuthenticated = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${apiUrl}authenticated`);\r\n\r\n        return data.authenticated;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const login = async (email, password) => {\r\n\r\n    const data = {\r\n        email,\r\n        password\r\n    }\r\n    try {\r\n        const response = await axios({\r\n            method: 'POST',\r\n            url: `${apiUrl}login`,\r\n            headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n            data: querystring.stringify(data)\r\n        })\r\n        return response\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const logout = async () => {\r\n    try {\r\n        const response = await axios.get(`${apiUrl}logout`)\r\n        return response\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getUserData = async () => {\r\n    try {\r\n        const response = await axios.get(`${apiUrl}user`)\r\n        return response\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const postTweet = async (tweetText) =>{\r\n\r\n    try{\r\n        const response=await axios({\r\n            method: 'POST',\r\n            url: `${apiUrl}createtweet`,\r\n            headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n            data: querystring.stringify({text:tweetText})\r\n        })\r\n\r\n        return response\r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n} "],"file":"apiServices.js"}