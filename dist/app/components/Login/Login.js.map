{"version":3,"sources":["../../../../src/app/components/Login/Login.js"],"names":["Login","location","emailRef","passwordRef","error","setError","show","setShow","history","state","undefined","action","response","replace","submitClick","event","current","value","logoutClick","console","log","pruebaClick","twitterLogo","email","password"],"mappings":"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","sourcesContent":["import React, { useRef, useState,useEffect } from 'react'\r\nimport './Login.css'\r\nimport twitterLogo from '../../assets/Twitter_Logo_WhiteOnImage.svg'\r\nimport { Link,useHistory } from 'react-router-dom'\r\nimport { login, logout, isAuthenticated } from '../../services/apiServices'\r\nimport ChargePage from '../ChargePage'\r\nconst Login = ({location}) => {\r\n\r\n    /*Refs*/\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n\r\n    /*State*/\r\n    const [error, setError] = useState(false)\r\n    const [show,setShow]=useState(false)\r\n\r\n    /*History*/\r\n    const history=useHistory()\r\n\r\n    /*Effect*/\r\n\r\n    useEffect(()=>{\r\n        if(location.state!==undefined){\r\n            setError(true)\r\n        }\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        const action= async ()=>{\r\n            const response=await isAuthenticated()\r\n            \r\n            if(response){\r\n                history.replace('/home')\r\n            }else{\r\n                setShow(true)\r\n            }\r\n        }\r\n\r\n        action()\r\n    },[])\r\n\r\n    /*Functions*/ \r\n    const submitClick = async (event) => {\r\n        const response = await login(emailRef.current.value, passwordRef.current.value)\r\n        if (!response) {\r\n            setError(true)\r\n        } else {\r\n            history.replace('/home')\r\n        }\r\n    }\r\n    const logoutClick = async (event) => {\r\n        const response = await logout()\r\n\r\n        console.log(response)\r\n    }\r\n\r\n    const pruebaClick = async () => {\r\n        const response = await isAuthenticated()\r\n\r\n        console.log(response)\r\n    }\r\n\r\n    return (\r\n        \r\n        <div>\r\n            {show && \r\n            <div className='login_container'>\r\n                <img src={twitterLogo} className='login_logo'></img>\r\n                <h1>Iniciar sesión en Twitter</h1>\r\n                {error && <div className='login_span'><span>Email o Contraseña no validos</span></div>} \r\n                <div className=\"login_correo\">\r\n                    <div className=\"login_texto\">Correo</div>\r\n                    <div className=\"login_input_box\"><input defaultValue={location.state!==undefined ? location.state.email : ''}  ref={emailRef} type='email' className='login_input' /></div>\r\n                </div>\r\n                <div className='login_contraseña'>\r\n                    <div className=\"login_texto\">Contraseña</div>\r\n                    <div className=\"login_input_box\"><input defaultValue={location.state!==undefined ? location.state.password : ''} ref={passwordRef} type='password' className='login_input' /></div>\r\n                </div>\r\n                <div onClick={(event) => { submitClick(event) }} className=\"login_button\">Iniciar sesión</div>\r\n                <button onClick={(event) => { logoutClick(event) }}>Logout</button>\r\n                <button onClick={pruebaClick}>Prueba</button>\r\n                <Link className='login_a' to='/'>Registrate en TwitterRed</Link>\r\n            </div>\r\n             }\r\n             \r\n             {(!show) && <ChargePage/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login"],"file":"Login.js"}