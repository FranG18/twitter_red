{"version":3,"sources":["../src/app.js"],"names":["MongoStore","require","session","MONGO_URL","app","use","graphiql","schema","context","message","secret","resave","saveUninitialized","store","url","autoReconnect","passport","initialize","bodyparser","urlencoded","extended","req","res","next","header","express","path","join","__dirname","rutes","get","sendFile","resolve"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AADA,IAAIA,UAAU,GAACC,OAAO,CAAC,eAAD,CAAP,CAAyBC,0BAAzB,CAAf;;AAGA,IAAMC,SAAS,GAAC,sCAAhB;AAEA,IAAMC,GAAG,GAAC,0BAAV;AAEAA,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAmB,gCAAY;AAC3BC,EAAAA,QAAQ,EAAC,IADkB;AAE3BC,EAAAA,MAAM,EAACA,kBAFoB;AAG3BC,EAAAA,OAAO,EAAC;AACJC,IAAAA,OAAO,EAAC;AADJ;AAHmB,CAAZ,CAAnB;AAQAL,GAAG,CAACC,GAAJ,CAAQ,gCAAQ;AACZK,EAAAA,MAAM,EAAC,QADK;AAEZC,EAAAA,MAAM,EAAC,IAFK;AAGZC,EAAAA,iBAAiB,EAAC,IAHN;AAIZC,EAAAA,KAAK,EAAC,IAAIb,UAAJ,CAAe;AACjBc,IAAAA,GAAG,EAACX,SADa;AAEjBY,IAAAA,aAAa,EAAC;AAFG,GAAf;AAJM,CAAR,CAAR;AAUAX,GAAG,CAACC,GAAJ,CAAQW,qBAASC,UAAT,EAAR;AACAb,GAAG,CAACC,GAAJ,CAAQW,qBAASd,OAAT,EAAR;AAEAE,GAAG,CAACC,GAAJ,CAAQa,uBAAWC,UAAX,CAAsB;AAACC,EAAAA,QAAQ,EAAC;AAAV,CAAtB,CAAR;AACAhB,GAAG,CAACC,GAAJ,CAAQ,wBAAO,KAAP,CAAR;AAEAD,GAAG,CAACC,GAAJ,CAAQ,UAACgB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AACpBD,EAAAA,GAAG,CAACE,MAAJ,CAAW,6BAAX,EAA0C,wBAA1C;AACAF,EAAAA,GAAG,CAACE,MAAJ,CAAW,8BAAX,EAA2C,+GAA3C;AACAF,EAAAA,GAAG,CAACE,MAAJ,CAAW,8BAAX,EAA2C,iCAA3C;AACAF,EAAAA,GAAG,CAACE,MAAJ,CAAW,OAAX,EAAoB,iCAApB;AACAD,EAAAA,IAAI;AACP,CAND;AASAnB,GAAG,CAACC,GAAJ,CAAQoB,8BAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAoB,QAApB,CAAf,CAAR;AACAxB,GAAG,CAACC,GAAJ,CAAQ,MAAR,EAAewB,iBAAf;AACAzB,GAAG,CAAC0B,GAAJ,CAAQ,GAAR,EAAa,UAACT,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACS,QAAJ,CAAaL,iBAAKM,OAAL,CAAa,KAAb,EAAmB,QAAnB,EAA4B,YAA5B,CAAb,CAAd;AAAA,CAAb;eAIe5B,G","sourcesContent":["import express from 'express';\r\nimport bodyparser from 'body-parser';\r\nimport morgan from 'morgan';\r\nimport path from 'path';\r\nimport rutes from './rutes/rutes'\r\nimport graphqlHTTP from 'express-graphql'\r\nimport schema from './graphql/schema'\r\nimport session from 'express-session';\r\nvar MongoStore=require('connect-mongo')(session);\r\nimport passport from 'passport';\r\n\r\nconst MONGO_URL='mongodb://localhost:27017/TwitterRed'\r\n\r\nconst app=express();\r\n\r\napp.use('/graphql',graphqlHTTP({\r\n    graphiql:true,\r\n    schema:schema,\r\n    context:{\r\n        message:'Mensaje desde el context'\r\n    }\r\n}));\r\n\r\napp.use(session({\r\n    secret:'secret',\r\n    resave:true,\r\n    saveUninitialized:true,\r\n    store:new MongoStore({\r\n        url:MONGO_URL,\r\n        autoReconnect:true\r\n    })\r\n}))\r\n\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\napp.use(bodyparser.urlencoded({extended:true}));\r\napp.use(morgan('dev'));\r\n\r\napp.use((req,res,next)=>{\r\n    res.header('Access-Control-Allow-Origin', 'GET, POST, PUT, DELETE');\r\n    res.header('Access-Control-Allow-Headers', 'Authorization, X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Allow-Request-Method');\r\n    res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');\r\n    res.header('Allow', 'GET, POST, OPTIONS, PUT, DELETE');\r\n    next();\r\n});\r\n\r\n\r\napp.use(express.static(path.join(__dirname,'public')));\r\napp.use('/api',rutes);\r\napp.get('*', (req, res) => res.sendFile(path.resolve('src','public','index.html')));\r\n\r\n\r\n\r\nexport default app;\r\n"],"file":"app.js"}