{"version":3,"sources":["../../src/controllers/controller.js"],"names":["controller","test","req","res","status","send","message","isAuthenticated","authenticated","createTweet","body","text","parent","_id","user","newTweet","Tweet","userId","likes","retweets","childrens","save","data","User","findById","update","tweets","tweetParent","error","deleteTweet","tweetId","tweet","splice","indexOf","parentTweet","findByIdAndDelete","likeTweet","liked","unlikeTweet","retweetTweet","unretweetTweet","getTweet","query","getAllTweets","find","getTweets"],"mappings":"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","sourcesContent":["import Tweet from '../models/Tweet'\r\nimport User from '../models/User'\r\nimport regeneratorRuntime, { async } from \"regenerator-runtime\";\r\n\r\nconst controller = {\r\n    test: (req, res) => res.status(200).send({ message: 'Prueba API' }),\r\n    isAuthenticated: (req, res) => {\r\n        if (req.isAuthenticated()) {\r\n            return res.status(200).send({ authenticated: true })\r\n        } else {\r\n            return res.status(200).send({ authenticated: false })\r\n        }\r\n    },\r\n    createTweet: async (req, res) => {\r\n        const { text, parent } = req.body\r\n        const _id = req.user._id\r\n        const newTweet = new Tweet({\r\n            userId: _id,\r\n            text,\r\n            parent: (parent) ? parent : null,\r\n            likes: [],\r\n            retweets: [],\r\n            childrens: [],\r\n        })\r\n\r\n        try {\r\n            const data = await newTweet.save()\r\n            const user = await User.findById(_id)\r\n\r\n            await user.update({ tweets: [...user.tweets, data._id] })\r\n\r\n            if (parent) {\r\n                const tweetParent = await Tweet.findById(parent);\r\n                await tweetParent.update({ childrens: [...tweetParent.childrens, data._id] })\r\n            }\r\n\r\n            return res.status(200).send({ message: 'TweetCreado' })\r\n        } catch (error) {\r\n            return res.status(400).send({ error })\r\n        }\r\n    },\r\n    deleteTweet: async (req, res) => {\r\n        const { tweetId } = req.body\r\n        const _id = req.user._id\r\n\r\n        try {\r\n            const tweet = await Tweet.findById(tweetId)\r\n\r\n            const user = await User.findById(_id)\r\n            user.tweets.splice(user.tweets.indexOf(tweetId), 1)\r\n            await user.save()\r\n\r\n            if (tweet.parent) {\r\n                const parentTweet = await Tweet.findById(tweet.parent)\r\n                parentTweet.childrens.splice(parentTweet.childrens.indexOf(tweetId), 1)\r\n                await parentTweet.save()\r\n            }\r\n\r\n            await Tweet.findByIdAndDelete(tweetId)\r\n\r\n            return res.status(200).send({ message: 'Tweet Eliminado' })\r\n\r\n        } catch (error) {\r\n            return res.status(400).send({ error })\r\n        }\r\n\r\n    },\r\n    likeTweet: async (req, res) => {\r\n        const { tweetId } = req.body\r\n        const _id = req.user._id\r\n\r\n        try {\r\n\r\n            const user = await User.findById(_id)\r\n            const tweet = await Tweet.findById(tweetId)\r\n\r\n            await user.update({ liked: [...user.liked, tweetId] })\r\n            await tweet.update({ likes: [...tweet.likes, _id] })\r\n\r\n            return res.status(200).send({ message: 'Like Guardado' })\r\n\r\n        } catch (error) {\r\n            return res.status(400).send({ error })\r\n        }\r\n    },\r\n    unlikeTweet: async (req, res) => {\r\n        const { tweetId } = req.body\r\n        const _id = req.user._id\r\n\r\n        try {\r\n\r\n            const user = await User.findById(_id)\r\n            const tweet = await Tweet.findById(tweetId)\r\n\r\n            user.liked.splice(user.liked.indexOf(tweetId), 1)\r\n            tweet.likes.splice(tweet.likes.indexOf(_id), 1)\r\n\r\n            await user.save()\r\n            await tweet.save()\r\n\r\n            return res.status(200).send({ message: 'Like Cambiado' })\r\n\r\n        } catch (error) {\r\n            return res.status(400).send({ error })\r\n        }\r\n    },\r\n    retweetTweet: async (req, res) => {\r\n        const { tweetId } = req.body\r\n        const _id = req.user._id\r\n\r\n        try {\r\n\r\n            const user = await User.findById(_id)\r\n            const tweet = await Tweet.findById(tweetId)\r\n\r\n            await user.update({ retweets: [...user.retweets, tweetId] })\r\n            await tweet.update({ retweets: [...tweet.retweets, _id] })\r\n\r\n            return res.status(200).send({ message: 'Reetweet Guardado' })\r\n\r\n        } catch (error) {\r\n            return res.status(400).send({ error })\r\n        }\r\n\r\n    },\r\n    unretweetTweet: async (req, res) => {\r\n        const { tweetId } = req.body\r\n        const _id = req.user._id\r\n\r\n        try {\r\n\r\n            const user = await User.findById(_id)\r\n            const tweet = await Tweet.findById(tweetId)\r\n\r\n            user.retweets.splice(user.retweets.indexOf(tweetId), 1)\r\n            tweet.retweets.splice(tweet.retweets.indexOf(_id), 1)\r\n\r\n            await user.save()\r\n            await tweet.save()\r\n\r\n            return res.status(200).send({ message: 'Reetweet Cambiado' })\r\n\r\n        } catch (error) {\r\n            return res.status(400).send({ error })\r\n        }\r\n    },\r\n    getTweet: async (req, res) => {\r\n\r\n        const { _id } = req.query\r\n\r\n        try {\r\n            return res.status(200).send({ tweet: await Tweet.findById(_id) })\r\n        } catch (error) {\r\n            return res.status(400).send({ error })\r\n        }\r\n\r\n    },\r\n    getAllTweets: async (req, res) => {\r\n\r\n        try {\r\n            return res.status(200).send({ tweets: await Tweet.find({}) })\r\n        } catch (error) {\r\n            return res.status(400).send({ error })\r\n        }\r\n    },\r\n    getTweets: async (req, res) => {\r\n\r\n        const { _id } = req.query\r\n\r\n        try {\r\n            return res.status(200).send({ tweets: await Tweet.find({ userId: _id }) })\r\n        } catch (error) {\r\n            return res.status(400).send({ error })\r\n        }\r\n    }\r\n}\r\n\r\nexport default controller"],"file":"controller.js"}